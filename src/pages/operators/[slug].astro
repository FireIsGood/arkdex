---
import MainLayout from "../../layouts/MainLayout.astro";
import type { Operator } from "../../scripts/operatorTypes";
import { toSlug } from "../../scripts/slugGen";

export async function getStaticPaths() {
  let operatorList = new Array();
  await fetch(
    "https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/en_US/gamedata/excel/character_table.json"
  )
    .then((response) => response.json())
    .then((data) => {
      operatorList = Object.entries(data)
        .filter(([technicalName, data]) => {
          const operator = data as Operator;
          return (
            operator.profession !== "TOKEN" && operator.profession !== "TRAP"
          );
        })
        .map(([technicalName, data]) => {
          const operator = data as Operator;
          return {
            params: { slug: toSlug(operator.name) },
            props: { technicalName, operator },
          };
        });
    });

  return operatorList;
}

interface Props {
  technicalName: string;
  operator: Operator;
}

const { slug } = Astro.params;
const { technicalName, operator } = Astro.props as Props;

const title = `Arkdex â–ª ${operator.name}`;
const operatorPhaseCount = operator.phases.length - 1;
const operatorImg = `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/characters/${technicalName}_1.png`;
const operatorAvatar = `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/avatars/${operator.phases[0].characterPrefabKey}.png`;
---

<MainLayout title={title} padding={false} ogImg={operatorAvatar}>
  <section>
    <a href="/arkdex/operators" class="back">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        height="48"
        width="48"
        fill="white"
        class="shadow"
      >
        <path
          d="M24 40.65 7.4 24 24 7.4l2.6 2.6-12.2 12.2h26.25v3.65H14.4l12.2 12.2Z"
        >
        </path>
      </svg>
    </a>
    <div class="column-image">
      <ul class="image-toolbar">
        <ul>
          <li>
            <button class="elite-icon" title="Switch to elite 2">
              <img
                src="https://raw.githubusercontent.com/Aceship/Arknight-Images/main/ui/elite/2-s.png"
              />
            </button>
          </li>
          <li>
            <button class="elite-icon" title="Switch to elite 1">
              <img
                src="https://raw.githubusercontent.com/Aceship/Arknight-Images/main/ui/elite/1-s.png"
              />
            </button>
          </li>
          <li>
            <button class="elite-icon" title="Switch to elite 0">
              <img
                src="https://raw.githubusercontent.com/Aceship/Arknight-Images/main/ui/elite/0-s.png"
              />
            </button>
          </li>
        </ul>
        <ul>
          <li class="section-top">
            <button>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                height="36"
                width="36"
                viewBox="0 0 48 48"
              >
                <path
                  d="m40.05 42.6-13.2-13.2q-1.55 1.3-3.65 2-2.1.7-4.35.7-5.7 0-9.6-3.9-3.9-3.9-3.9-9.5t3.9-9.5q3.9-3.9 9.5-3.9t9.5 3.9q3.9 3.9 3.9 9.5 0 2.2-.675 4.225Q30.8 24.95 29.4 26.75l13.3 13.2ZM18.8 28.45q4.05 0 6.875-2.85t2.825-6.9q0-4.05-2.825-6.9Q22.85 8.95 18.8 8.95q-4.15 0-6.975 2.85Q9 14.65 9 18.7q0 4.05 2.825 6.9 2.825 2.85 6.975 2.85Zm-1.9-3.8v-4.2h-4.2V16.8h4.2v-4.15h3.65v4.15h4.15v3.65h-4.15v4.2Z"
                >
                </path>
              </svg>
            </button>
          </li>
        </ul>
      </ul>
      <img src={operatorImg} alt={operatorImg} />
    </div>
    <div class="column-stats">
      <h1>{operator.name}</h1>
      <p>{technicalName}</p>
      <ul class="tag-list">
        {
          Object.entries(operator.tagList).map((tag) => {
            return <li class="tag">{tag[1]}</li>;
          })
        }
      </ul>
      <p>Max elite: {operatorPhaseCount}</p>
      <p>
        <span class="key-label">Attack at e0 max:</span>
        {operator.phases[0].attributesKeyFrames[1].data.atk}
      </p>
      {
        Object.entries(operator).map(([key, value]) => {
          return (
            <p>
              <span class="key-label">{key}:</span> {value + []}
            </p>
          );
        })
      }
    </div>
  </section>
</MainLayout>

<style lang="scss">
  // General Styles

  h1 {
    text-align: center;
    font-size: 2em;
  }

  // Main Styles

  section {
    display: flex;
    flex-direction: column;

    > div {
      min-width: 300px;
    }
  }

  a.back {
    z-index: 4;
    position: absolute;

    svg {
      display: block;
      fill: var(--theme-button);
    }
  }

  .column-image {
    position: relative;
    display: grid;
    width: 100%;
    height: 100%;
    place-self: center;
    place-items: center;

    .image-toolbar {
      grid-area: 1 / 1;
      z-index: 2;
      justify-self: left;
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;

      ul {
        display: flex;
        flex-direction: column;
        gap: 2px;
        background-color: var(--theme-button-gap);
      }

      li {
        display: flex;
      }

      button {
        width: 2.75rem;
        padding: 0;
        background-color: var(--theme-button);
        cursor: pointer;
        transition: background-color 150ms ease;
        display: flex;
        justify-content: center;

        &.elite-icon {
          height: 1.75rem;
        }

        img {
          height: 100%;
        }

        &:hover {
          background-color: var(--theme-button-hover);
        }
      }
    }

    > img {
      grid-area: 1 / 1;
      z-index: 1;
      position: relative;
      width: 100%;
      max-width: 600px;
    }
  }

  .column-stats {
    padding: 1rem;
    background-color: var(--theme-card);

    .tag-list {
      list-style: none;
      display: flex;
      gap: 0.25rem;

      li.tag {
        display: inline-block;
        padding: 0.15rem 0.35rem;
        border-radius: 0.25rem;
        background-color: var(--theme-tag);
        color: var(--theme-tag-text);
      }
    }

    > * + * {
      margin-top: 1rem;
    }
  }

  .key-label {
    color: var(--theme-text-accent);
  }

  // Media query for Desktop

  @media (min-width: 600px) {
    section {
      flex-direction: row;
    }

    .column-stats {
      max-height: calc(100vh - var(--header-height));
      overflow-y: scroll;
    }
  }
</style>

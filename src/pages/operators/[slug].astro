---
import MainLayout from "@layouts/MainLayout.astro";
import type { OperatorTypes } from "@scripts/operatorTypes";
import { toSlug } from "@scripts/slugGen";
import { filterObjectsBySubValue } from "@scripts/helperFunc";
import { getPicture } from "@astrojs/image";
import type { SkinTable } from "@scripts/skinTypes";
import Operator from "@components/operator.svelte";
import type {
  Params,
  Props,
  Images,
  PictureObjects,
} from "@scripts/pagePropTypes";

export async function getStaticPaths() {
  let eliteImages: PictureObjects = {};
  for (let elite of ["0", "1", "2"]) {
    eliteImages[elite] = await getPicture({
      src: `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/ui/elite/${elite}-s.png`,
      widths: [72],
      aspectRatio: "1:1",
      formats: ["avif", "webp"],
    });
  }

  interface OperatorList {
    params: Params;
    props: Props;
  }

  let operatorList: OperatorList[] = new Array();
  let skinList: SkinTable;

  await fetch(
    "https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/en_US/gamedata/excel/skin_table.json"
  )
    .then((res) => res.json())
    .then((data) => {
      skinList = data;
    });
  await fetch(
    "https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/en_US/gamedata/excel/character_table.json"
  )
    .then((response) => response.json())
    .then((data) => {
      operatorList = Object.entries(data)
        .filter(([technicalName, data]) => {
          const operator = data as OperatorTypes;
          return (
            operator.profession !== "TOKEN" &&
            operator.profession !== "TRAP" &&
            technicalName !== "char_512_aprot"
          );
        })
        .map(([technicalName, data]) => {
          const operator = data as OperatorTypes;

          // Get elite levels as an object with key as the level and value as the getPicture output
          let elites: PictureObjects = {};
          for (let num of Object.keys(
            skinList.buildinEvolveMap[technicalName]
          )) {
            elites[num] = eliteImages[num];
          }

          const skins: any = filterObjectsBySubValue(
            skinList.charSkins,
            "charId",
            technicalName
          );

          const images: Images = {
            character: {},
            faction: null,
          };
          return {
            params: { slug: toSlug(operator.name) },
            props: { technicalName, operator, elites, skins, images },
          };
        });
    });

  for (let item of operatorList) {
    const operator = item.props.operator;
    const elites = Object.keys(item.props.elites);

    // Get character image
    for (let elite of elites) {
      const file =
        // @ts-expect-error skinList being weird
        skinList.charSkins[
          // @ts-expect-error skinList being weird
          skinList.buildinEvolveMap[item.props.technicalName][elite]
        ].portraitId;
      item.props.images.character[elite] = await getPicture({
        src: `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/characters/${file}.png`,
        widths: [600],
        aspectRatio: "1:1",
        formats: ["avif", "webp", "png"],
      });
    }

    const operatorFaction =
      operator.teamId !== null
        ? operator.teamId
        : operator.groupId !== null
        ? operator.groupId
        : operator.nationId;
    if (operatorFaction !== null) {
      item.props.images.faction = await getPicture({
        src: `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/factions/logo_${operatorFaction}.png`,
        widths: [180],
        aspectRatio: "1:1",
        formats: ["avif", "webp", "png"],
      });
    }
  }

  return operatorList;
}

const { slug } = Astro.params;
const { technicalName, operator, elites, skins, images } = Astro.props as Props;

const title = `Arkdex â–ª ${operator.name}`;
const ogTitle = `Arkdex Page For ${operator.name}`;
const operatorImgAlt = `${operator.name} Image`;
const operatorAvatar = `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/avatars/${operator.phases[0].characterPrefabKey}.png`;
---

<MainLayout
  title={title}
  ogTitle={ogTitle}
  padding={false}
  ogImg={operatorAvatar}
  ogImgAlt={operatorImgAlt}
  ogDesc={operator.itemUsage}
>
  <Operator
    client:idle
    technicalName={technicalName}
    operator={operator}
    elites={elites}
    skins={skins}
    images={images}
  />
</MainLayout>

<style lang="scss"></style>
